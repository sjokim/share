/*
 *  @(#) YyLex.java
 *  Copyright 2003 the original author or authors. 
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License"); 
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License. 
 *  
 *   This source, generated by JLex(https://www.cs.princeton.edu/~appel/modern/java/JLex/)
 */
 package share.formula;
class YyToken {
	public final static int FUNCTION = 91;
	/**
	 * BASE_VAL 이후의 번호는 값들을 의미한다. BASE_VAL 이하의 토큰들은 오퍼랜드들을 갖는 토큰들이다.
	 */
	public final static int BASE_VAL = 100;
	public final static int NULL = 101;
	public final static int BOOLEAN = 102;
	public final static int DECIMAL = 103;
	public final static int REAL = 104;
	public final static int OBJECT = 105;
	public final static int STRING = 106;
	public final static int VARIABLE = 120;
	public final static int PHRENTHESIS_OPEN = 50;
	public final static int PHRENTHESIS_CLOSE = 51;
	public final static int BRACKET_OPEN = 1001;
	public final static int BRACKET_CLOSE = 1002;
	public final static int COMMA = 1003;
  YyToken(int index, Object value) {
	this.index = index;
	this.value = value;
  }
  public int index;
  public Object value;
  public String toString() {
      return "YyToken #"+index+": "+value;
  }
  public boolean equals(Object o) {
        if (o instanceof YyToken) {
            YyToken param = (YyToken) o;
            return (param.index == this.index) && (this.value.equals(param.value));
        } else {
            return false;
        }
  }
  public int hashCode() {
        return toString().hashCode();
  }
}


class YyLex {
	private final int YY_BUFFER_SIZE = 512;
	private final int YY_F = -1;
	private final int YY_NO_STATE = -1;
	private final int YY_NOT_ACCEPT = 0;
	private final int YY_START = 1;
	private final int YY_END = 2;
	private final int YY_NO_ANCHOR = 4;
	private final int YY_BOL = 65536;
	private final int YY_EOF = 65537;

  private int comment_count = 0;
	private java.io.BufferedReader yy_reader;
	private int yy_buffer_index;
	private int yy_buffer_read;
	private int yy_buffer_start;
	private int yy_buffer_end;
	private char yy_buffer[];
	private int yychar;
	private int yyline;
	private boolean yy_at_bol;
	private int yy_lexical_state;

	YyLex (java.io.Reader reader) {
		this ();
		if (null == reader) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(reader);
	}

	YyLex (java.io.InputStream instream) {
		this ();
		if (null == instream) {
			throw (new Error("Error: Bad input stream initializer."));
		}
		yy_reader = new java.io.BufferedReader(new java.io.InputStreamReader(instream));
	}

	private YyLex () {
		yy_buffer = new char[YY_BUFFER_SIZE];
		yy_buffer_read = 0;
		yy_buffer_index = 0;
		yy_buffer_start = 0;
		yy_buffer_end = 0;
		yychar = 0;
		yyline = 0;
		yy_at_bol = true;
		yy_lexical_state = YYINITIAL;
	}

	private boolean yy_eof_done = false;
	private final int YYINITIAL = 0;
	private final int COMMENT = 1;
	private final int yy_state_dtrans[] = {
		0,
		32
	};
	private void yybegin (int state) {
		yy_lexical_state = state;
	}
	private int yy_advance ()
		throws java.io.IOException {
		int next_read;
		int i;
		int j;

		if (yy_buffer_index < yy_buffer_read) {
			return yy_buffer[yy_buffer_index++];
		}

		if (0 != yy_buffer_start) {
			i = yy_buffer_start;
			j = 0;
			while (i < yy_buffer_read) {
				yy_buffer[j] = yy_buffer[i];
				++i;
				++j;
			}
			yy_buffer_end = yy_buffer_end - yy_buffer_start;
			yy_buffer_start = 0;
			yy_buffer_read = j;
			yy_buffer_index = j;
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}

		while (yy_buffer_index >= yy_buffer_read) {
			if (yy_buffer_index >= yy_buffer.length) {
				yy_buffer = yy_double(yy_buffer);
			}
			next_read = yy_reader.read(yy_buffer,
					yy_buffer_read,
					yy_buffer.length - yy_buffer_read);
			if (-1 == next_read) {
				return YY_EOF;
			}
			yy_buffer_read = yy_buffer_read + next_read;
		}
		return yy_buffer[yy_buffer_index++];
	}
	private void yy_move_end () {
		if (yy_buffer_end > yy_buffer_start &&
		    '\n' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
		if (yy_buffer_end > yy_buffer_start &&
		    '\r' == yy_buffer[yy_buffer_end-1])
			yy_buffer_end--;
	}
	private boolean yy_last_was_cr=false;
	private void yy_mark_start () {
		int i;
		for (i = yy_buffer_start; i < yy_buffer_index; ++i) {
			if ('\n' == yy_buffer[i] && !yy_last_was_cr) {
				++yyline;
			}
			if ('\r' == yy_buffer[i]) {
				++yyline;
				yy_last_was_cr=true;
			} else yy_last_was_cr=false;
		}
		yychar = yychar
			+ yy_buffer_index - yy_buffer_start;
		yy_buffer_start = yy_buffer_index;
	}
	private void yy_mark_end () {
		yy_buffer_end = yy_buffer_index;
	}
	private void yy_to_mark () {
		yy_buffer_index = yy_buffer_end;
		yy_at_bol = (yy_buffer_end > yy_buffer_start) &&
		            ('\r' == yy_buffer[yy_buffer_end-1] ||
		             '\n' == yy_buffer[yy_buffer_end-1] ||
		             2028/*LS*/ == yy_buffer[yy_buffer_end-1] ||
		             2029/*PS*/ == yy_buffer[yy_buffer_end-1]);
	}
	private java.lang.String yytext () {
		return (new java.lang.String(yy_buffer,
			yy_buffer_start,
			yy_buffer_end - yy_buffer_start));
	}
	private int yylength () {
		return yy_buffer_end - yy_buffer_start;
	}
	private char[] yy_double (char buf[]) {
		int i;
		char newbuf[];
		newbuf = new char[2*buf.length];
		for (i = 0; i < buf.length; ++i) {
			newbuf[i] = buf[i];
		}
		return newbuf;
	}
	private final int YY_E_INTERNAL = 0;
	private final int YY_E_MATCH = 1;
	private java.lang.String yy_error_string[] = {
		"Error: Internal error.\n",
		"Error: Unmatched input.\n"
	};
	private void yy_error (int code,boolean fatal) {
		java.lang.System.out.print(yy_error_string[code]);
		java.lang.System.out.flush();
		if (fatal) {
			throw new Error("Fatal Error.\n");
		}
	}
	private int[][] unpackFromString(int size1, int size2, String st) {
		int colonIndex = -1;
		String lengthString;
		int sequenceLength = 0;
		int sequenceInteger = 0;

		int commaIndex;
		String workString;

		int res[][] = new int[size1][size2];
		for (int i= 0; i < size1; i++) {
			for (int j= 0; j < size2; j++) {
				if (sequenceLength != 0) {
					res[i][j] = sequenceInteger;
					sequenceLength--;
					continue;
				}
				commaIndex = st.indexOf(',');
				workString = (commaIndex==-1) ? st :
					st.substring(0, commaIndex);
				st = st.substring(commaIndex+1);
				colonIndex = workString.indexOf(':');
				if (colonIndex == -1) {
					res[i][j]=Integer.parseInt(workString);
					continue;
				}
				lengthString =
					workString.substring(colonIndex+1);
				sequenceLength=Integer.parseInt(lengthString);
				workString=workString.substring(0,colonIndex);
				sequenceInteger=Integer.parseInt(workString);
				res[i][j] = sequenceInteger;
				sequenceLength--;
			}
		}
		return res;
	}
	private int yy_acpt[] = {
		/* 0 */ YY_NOT_ACCEPT,
		/* 1 */ YY_NO_ANCHOR,
		/* 2 */ YY_NO_ANCHOR,
		/* 3 */ YY_NO_ANCHOR,
		/* 4 */ YY_NO_ANCHOR,
		/* 5 */ YY_NO_ANCHOR,
		/* 6 */ YY_NO_ANCHOR,
		/* 7 */ YY_NO_ANCHOR,
		/* 8 */ YY_NO_ANCHOR,
		/* 9 */ YY_NO_ANCHOR,
		/* 10 */ YY_NO_ANCHOR,
		/* 11 */ YY_NO_ANCHOR,
		/* 12 */ YY_NO_ANCHOR,
		/* 13 */ YY_NO_ANCHOR,
		/* 14 */ YY_NO_ANCHOR,
		/* 15 */ YY_NO_ANCHOR,
		/* 16 */ YY_NO_ANCHOR,
		/* 17 */ YY_NO_ANCHOR,
		/* 18 */ YY_NO_ANCHOR,
		/* 19 */ YY_NO_ANCHOR,
		/* 20 */ YY_NO_ANCHOR,
		/* 21 */ YY_NO_ANCHOR,
		/* 22 */ YY_NO_ANCHOR,
		/* 23 */ YY_NO_ANCHOR,
		/* 24 */ YY_NO_ANCHOR,
		/* 25 */ YY_NO_ANCHOR,
		/* 26 */ YY_NO_ANCHOR,
		/* 27 */ YY_NO_ANCHOR,
		/* 28 */ YY_NO_ANCHOR,
		/* 29 */ YY_NO_ANCHOR,
		/* 30 */ YY_NO_ANCHOR,
		/* 31 */ YY_NO_ANCHOR,
		/* 32 */ YY_NO_ANCHOR,
		/* 33 */ YY_NO_ANCHOR,
		/* 34 */ YY_NO_ANCHOR,
		/* 35 */ YY_NO_ANCHOR,
		/* 36 */ YY_NOT_ACCEPT,
		/* 37 */ YY_NO_ANCHOR,
		/* 38 */ YY_NO_ANCHOR,
		/* 39 */ YY_NO_ANCHOR,
		/* 40 */ YY_NO_ANCHOR,
		/* 41 */ YY_NO_ANCHOR,
		/* 42 */ YY_NOT_ACCEPT,
		/* 43 */ YY_NO_ANCHOR,
		/* 44 */ YY_NO_ANCHOR,
		/* 45 */ YY_NO_ANCHOR,
		/* 46 */ YY_NO_ANCHOR,
		/* 47 */ YY_NOT_ACCEPT,
		/* 48 */ YY_NO_ANCHOR,
		/* 49 */ YY_NO_ANCHOR,
		/* 50 */ YY_NOT_ACCEPT,
		/* 51 */ YY_NO_ANCHOR,
		/* 52 */ YY_NOT_ACCEPT,
		/* 53 */ YY_NO_ANCHOR,
		/* 54 */ YY_NOT_ACCEPT,
		/* 55 */ YY_NO_ANCHOR,
		/* 56 */ YY_NOT_ACCEPT,
		/* 57 */ YY_NO_ANCHOR,
		/* 58 */ YY_NOT_ACCEPT,
		/* 59 */ YY_NOT_ACCEPT,
		/* 60 */ YY_NOT_ACCEPT,
		/* 61 */ YY_NOT_ACCEPT,
		/* 62 */ YY_NO_ANCHOR,
		/* 63 */ YY_NO_ANCHOR,
		/* 64 */ YY_NO_ANCHOR,
		/* 65 */ YY_NO_ANCHOR,
		/* 66 */ YY_NO_ANCHOR,
		/* 67 */ YY_NO_ANCHOR,
		/* 68 */ YY_NO_ANCHOR
	};
	private int yy_cmap[] = unpackFromString(1,65538,
"29:8,16:2,17,29:2,16,29:18,16,9,27,29:2,3,10,18,14,15,1,4,19,5,23,2,21:10,1" +
"3,29,6,8,7,12,29,20:26,29,28,29:2,22,29,34,20:3,32,33,20:5,26,20,24,20:3,31" +
",35,30,25,20:5,29,11,29:65411,0:2")[0];

	private int yy_rmap[] = unpackFromString(1,69,
"0,1:2,2,1:3,3,4,5,1:4,6,1,7,8,9,1:9,10,11,7:2,12,1:3,13,14,15,16,9,17,18,19" +
",20,21,22,23,24,25,26,13,11,1,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41")[0];

	private int yy_nxt[][] = unpackFromString(42,36,
"1,2,3,4,5,6,7,8,9,37,43,48,10,11,12,13,14:2,51,15,16,17,53:2,65,16:2,18,53:" +
"2,66,16:2,68,16:2,-1:37,19,-1:42,20,-1:35,21,-1:35,22,-1:43,14:2,-1:32,27,-" +
"1,47:2,-1:2,16:3,50,16:3,-1:3,16:6,-1:21,17,-1,52,-1:13,18:16,-1:2,18:8,26," +
"39,18:7,-1:14,27,-1,47:2,-1:2,28:3,58,28:3,-1:3,28:6,-1:21,29,-1:14,1,55,57" +
",41:14,33,41:18,-1,36:16,-1,26,36:8,-1,42,36:7,-1:8,23,-1:41,27,-1,47:2,-1:" +
"2,16:3,50,16:2,30,-1:3,16:6,-1,18:15,45,59,-1,18:8,40,39,18:7,-1,60,61,41:1" +
"4,-1,41:18,-1,36:15,54,56,26,36:9,42,36:7,-1:10,24,-1:39,27,-1,47:2,-1:2,16" +
":3,50,16:3,-1:3,16:2,31,16:3,-1,18:15,45,59,-1,18:8,26,39,18:7,-1,46,61,41:" +
"14,-1,41:18,-1:14,27,-1,47:2,-1:29,25,-1:25,60,49,41:14,-1,41:18,-1:14,27,-" +
"1,47:2,-1:2,28,58:3,28:3,-1:3,28:6,-1,36:15,54,56,26,36:8,-1,42,36:7,-1,46," +
"34,41:14,-1,41:18,-1:16,56:2,-1:10,36,-1:8,35,49,41:14,-1,41:18,-1:14,27,-1" +
",47:2,-1:2,58:7,-1:3,58:6,-1:16,59:2,-1:10,18,-1:8,46,-1,41:14,-1,41:18,-1:" +
"2,49,41:14,-1,41:18,-1:14,27,-1,47:2,-1:2,16:3,50,16:2,38,-1:3,16:6,-1:14,2" +
"7,-1,47:2,-1:2,16:3,50,16,44,16,-1:3,16:6,-1:14,27,-1,47:2,-1:2,16:3,50,16:" +
"3,-1:3,16:5,44,-1:14,27,-1,47:2,-1:2,16:3,50,16,62,16,-1:3,16:6,-1:14,27,-1" +
",47:2,-1:2,16:3,50,16:3,-1:3,16,63,16:4,-1:14,27,-1,47:2,-1:2,16:3,50,16:2," +
"64,-1:3,16:6,-1:14,27,-1,47:2,-1:2,16:3,50,16:3,-1:3,16:4,67,16");

	public YyToken yylex ()
		throws java.io.IOException, 
Exception

		{
		int yy_lookahead;
		int yy_anchor = YY_NO_ANCHOR;
		int yy_state = yy_state_dtrans[yy_lexical_state];
		int yy_next_state = YY_NO_STATE;
		int yy_last_accept_state = YY_NO_STATE;
		boolean yy_initial = true;
		int yy_this_accept;

		yy_mark_start();
		yy_this_accept = yy_acpt[yy_state];
		if (YY_NOT_ACCEPT != yy_this_accept) {
			yy_last_accept_state = yy_state;
			yy_mark_end();
		}
		while (true) {
			if (yy_initial && yy_at_bol) yy_lookahead = YY_BOL;
			else yy_lookahead = yy_advance();
			yy_next_state = YY_F;
			yy_next_state = yy_nxt[yy_rmap[yy_state]][yy_cmap[yy_lookahead]];
			if (YY_EOF == yy_lookahead && true == yy_initial) {
				return null;
			}
			if (YY_F != yy_next_state) {
				yy_state = yy_next_state;
				yy_initial = false;
				yy_this_accept = yy_acpt[yy_state];
				if (YY_NOT_ACCEPT != yy_this_accept) {
					yy_last_accept_state = yy_state;
					yy_mark_end();
				}
			}
			else {
				if (YY_NO_STATE == yy_last_accept_state) {
					throw (new Error("Lexical Error: Unmatched Input."));
				}
				else {
					yy_anchor = yy_acpt[yy_last_accept_state];
					if (0 != (YY_END & yy_anchor)) {
						yy_move_end();
					}
					yy_to_mark();
					switch (yy_last_accept_state) {
					case 1:
						
					case -2:
						break;
					case 2:
						{ return (new YyToken(0,yytext())); }
					case -3:
						break;
					case 3:
						{ return (new YyToken(1,yytext())); }
					case -4:
						break;
					case 4:
						{ return (new YyToken(2,yytext())); }
					case -5:
						break;
					case 5:
						{ return (new YyToken(10,yytext())); }
					case -6:
						break;
					case 6:
						{ return (new YyToken(11,yytext())); }
					case -7:
						break;
					case 7:
						{ return (new YyToken(20,yytext())); }
					case -8:
						break;
					case 8:
						{ return (new YyToken(21,yytext())); }
					case -9:
						break;
					case 9:
						{	throw new Exception("Illegal character : "+yytext());}
					case -10:
						break;
					case 10:
						{ return (new YyToken(42,yytext())); }
					case -11:
						break;
					case 11:
						{ return (new YyToken(43,yytext())); }
					case -12:
						break;
					case 12:
						{ return (new YyToken(50,yytext())); }
					case -13:
						break;
					case 13:
						{ return (new YyToken(51,yytext())); }
					case -14:
						break;
					case 14:
						{ }
					case -15:
						break;
					case 15:
						{ return (new YyToken(1003,yytext())); }
					case -16:
						break;
					case 16:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -17:
						break;
					case 17:
						{ return (new YyToken(YyToken.DECIMAL, new Long(yytext())));}
					case -18:
						break;
					case 18:
						{ throw new Exception("Unclosed String : "+yytext()); }
					case -19:
						break;
					case 19:
						{ yybegin(COMMENT); comment_count = comment_count + 1; }
					case -20:
						break;
					case 20:
						{ return (new YyToken(22,yytext())); }
					case -21:
						break;
					case 21:
						{ return (new YyToken(23,yytext())); }
					case -22:
						break;
					case 22:
						{ return (new YyToken(30,yytext())); }
					case -23:
						break;
					case 23:
						{ return (new YyToken(31,yytext())); }
					case -24:
						break;
					case 24:
						{ return (new YyToken(40,yytext())); }
					case -25:
						break;
					case 25:
						{ return (new YyToken(41,yytext())); }
					case -26:
						break;
					case 26:
						{	return (new YyToken(YyToken.STRING, yytext().substring(1,yytext().length() - 1))); }
					case -27:
						break;
					case 27:
						{ return ( new YyToken(YyToken.FUNCTION,yytext()) );}
					case -28:
						break;
					case 28:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -29:
						break;
					case 29:
						{ return (new YyToken(YyToken.REAL, new Double(yytext())));}
					case -30:
						break;
					case 30:
						{ return (new YyToken(YyToken.NULL,yytext())); }
					case -31:
						break;
					case 31:
						{ return (new YyToken(YyToken.BOOLEAN, new Boolean(yytext()))); }
					case -32:
						break;
					case 32:
						{ }
					case -33:
						break;
					case 33:
						{ }
					case -34:
						break;
					case 34:
						{ 
	comment_count = comment_count - 1; 
	if(comment_count < 0)
	   throw new Exception("Invalid Comment");
	if (comment_count == 0) {
    		yybegin(YYINITIAL);
	}
}
					case -35:
						break;
					case 35:
						{ comment_count = comment_count + 1; }
					case -36:
						break;
					case 37:
						{	throw new Exception("Illegal character : "+yytext());}
					case -37:
						break;
					case 38:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -38:
						break;
					case 39:
						{ throw new Exception("Unclosed String : "+yytext()); }
					case -39:
						break;
					case 40:
						{	return (new YyToken(YyToken.STRING, yytext().substring(1,yytext().length() - 1))); }
					case -40:
						break;
					case 41:
						{ }
					case -41:
						break;
					case 43:
						{	throw new Exception("Illegal character : "+yytext());}
					case -42:
						break;
					case 44:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -43:
						break;
					case 45:
						{ throw new Exception("Unclosed String : "+yytext()); }
					case -44:
						break;
					case 46:
						{ }
					case -45:
						break;
					case 48:
						{	throw new Exception("Illegal character : "+yytext());}
					case -46:
						break;
					case 49:
						{ }
					case -47:
						break;
					case 51:
						{	throw new Exception("Illegal character : "+yytext());}
					case -48:
						break;
					case 53:
						{	throw new Exception("Illegal character : "+yytext());}
					case -49:
						break;
					case 55:
						{	throw new Exception("Illegal character : "+yytext());}
					case -50:
						break;
					case 57:
						{	throw new Exception("Illegal character : "+yytext());}
					case -51:
						break;
					case 62:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -52:
						break;
					case 63:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -53:
						break;
					case 64:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -54:
						break;
					case 65:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -55:
						break;
					case 66:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -56:
						break;
					case 67:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -57:
						break;
					case 68:
						{ return (new YyToken(YyToken.VARIABLE ,yytext()));}
					case -58:
						break;
					default:
						yy_error(YY_E_INTERNAL,false);
					case -1:
					}
					yy_initial = true;
					yy_state = yy_state_dtrans[yy_lexical_state];
					yy_next_state = YY_NO_STATE;
					yy_last_accept_state = YY_NO_STATE;
					yy_mark_start();
					yy_this_accept = yy_acpt[yy_state];
					if (YY_NOT_ACCEPT != yy_this_accept) {
						yy_last_accept_state = yy_state;
						yy_mark_end();
					}
				}
			}
		}
	}
}
